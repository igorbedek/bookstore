Module Bookstore
{
    Entity Book
    {
        Auditable;
        ShortString Code { AutoCode; }
        ShortString Title;
        Integer NumberOfPages;

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

        ItemFilter LongBooks 'item => item.NumberOfPages >= 5000';
        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 5000);
            }';
            ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';

        Reference Author Bookstore.Person;
        Reference Genre Bookstore.Genre;

       

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';
       // Logging;

       
      
    }
    Parameter LongBooks2
        {
           
        }

     Parameter LongBooks3
        {
            Integer MinimumPages;
            Bool ForeignBooksOnly;
        }

    Entity Person
    {
        ShortString Name;
        Logging;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo;
        Logging;
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
        Logging;
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    }

    SqlQueryable BookInfo
    "
        SELECT
            b.ID,
            NumberOfComments = COUNT(c.ID)
        FROM
            Bookstore.Book b
            LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
        GROUP BY
            b.ID
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    SqlObject BooksView 
        "CREATE VIEW Bookstore.V_Books as select b.ID, b.Title, a.Name Author from Bookstore.Book b join Bookstore.Person a on b.AuthorID = a.ID"
        "drop view Bookstore.V_Books"
     {
         SqlDependsOn Bookstore.Book;
         SqlDependsOn Bookstore.Person;
     }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Action InsertRandomAuthors '(parameter, repository, userInfo) => Bookstore.Service.External.RandomDataGenerator.InsertAuthors(repository, parameter.NumberOfAuthors)'
    {
        Integer NumberOfAuthors;
    }

    Action InsertRandomBooks '(parameter, repository, userInfo) => Bookstore.Service.External.RandomDataGenerator.InsertBooks(repository, parameter.NumberOfBooks)' 
    {
        Integer NumberOfBooks;
    }
}