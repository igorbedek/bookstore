// <autogenerated />
namespace Bookstore.Repositories
{
    #pragma warning disable // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Linq.Expressions;
    using System.Runtime.Serialization;
    using Rhetos.Dom.DefaultConcepts;
    using Rhetos.Utilities;

    /*ModuleInfo Using Bookstore*/

    public class ModuleRepository
    {
        private readonly Rhetos.Extensibility.INamedPlugins<IRepository> _repositories;

        public ModuleRepository(Rhetos.Extensibility.INamedPlugins<IRepository> repositories)
        {
            _repositories = repositories;
        }

        private Book_Repository _Book_Repository;
        public Book_Repository Book { get { return _Book_Repository ?? (_Book_Repository = (Book_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Book")); } }

        private ChildrensBook_Repository _ChildrensBook_Repository;
        public ChildrensBook_Repository ChildrensBook { get { return _ChildrensBook_Repository ?? (_ChildrensBook_Repository = (ChildrensBook_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ChildrensBook")); } }

        private Comment_Repository _Comment_Repository;
        public Comment_Repository Comment { get { return _Comment_Repository ?? (_Comment_Repository = (Comment_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Comment")); } }

        private ForeignBook_Repository _ForeignBook_Repository;
        public ForeignBook_Repository ForeignBook { get { return _ForeignBook_Repository ?? (_ForeignBook_Repository = (ForeignBook_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.ForeignBook")); } }

        private Person_Repository _Person_Repository;
        public Person_Repository Person { get { return _Person_Repository ?? (_Person_Repository = (Person_Repository)Rhetos.Extensibility.NamedPluginsExtensions.GetPlugin(_repositories, @"Bookstore.Person")); } }

        /*ModuleInfo RepositoryMembers Bookstore*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Book*/
    public partial class Book_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Book*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Book, Bookstore.Book> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Book, Bookstore.Book> // Common.ReadableRepositoryBase<Bookstore.Book> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Book>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Book*/
    {
        private readonly Rhetos.Utilities.ILocalizer<Bookstore.Book> _localizer;
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Book*/

        public Book_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ILocalizer<Bookstore.Book> _localizer, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Book*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._localizer = _localizer;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Book*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.CommonMisspelling", typeof(Bookstore.CommonMisspelling)),
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredCode", typeof(Bookstore.SystemRequiredCode)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Book*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Book> insertedNew, IEnumerable<Bookstore.Book> updatedNew, IEnumerable<Bookstore.Book> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Book*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Book*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Book*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Book> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Book> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Code, newItem, "Bookstore", "Book", "Code");

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Title, newItem, "Bookstore", "Book", "Title");

            AutoCodeHelper.UpdateCodesWithoutCache(
                _executionContext.SqlExecuter, "Bookstore.Book", "Code",
                insertedNew.Select(item => AutoCodeItem.Create(item, item.Code/*AutoCodePropertyInfo Grouping Bookstore.Book.Code*/)).ToList(),
                (item, newCode) => item.Code = newCode/*AutoCodePropertyInfo GroupColumnMetadata Bookstore.Book.Code*/);

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.ChildrensBook> childItems = _executionContext.Repository.Bookstore.ChildrensBook
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.ChildrensBook { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.ChildrensBook.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.Comment> childItems = deletedIds
                    .SelectMany(parent => _executionContext.Repository.Bookstore.Comment.Query()
                        .Where(child => child.BookID == parent.ID)
                        .Select(child => child.ID)
                        .ToList())
                    .Select(childId => new Bookstore.Comment { ID = childId })
                    .ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.Comment.Delete(childItems);
            }

            if (deletedIds.Count() > 0)
            {
                List<Bookstore.ForeignBook> childItems = _executionContext.Repository.Bookstore.ForeignBook
                    .Query(deletedIds.Select(parent => parent.ID))
                    .Select(child => child.ID).ToList()
                    .Select(childId => new Bookstore.ForeignBook { ID = childId }).ToList();

                if (childItems.Count() > 0)
                    _domRepository.Bookstore.ForeignBook.Delete(childItems);
            }

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Book*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Book*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ChildrensBook", @"ID", @"FK_ChildrensBook_Book_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ChildrensBook,Property:ID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Comment", @"BookID", @"FK_Comment_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Comment,Property:BookID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ForeignBook", @"ID", @"FK_ForeignBook_Book_ID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:ID,Referenced:Bookstore.Book";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Person", @"ID", @"FK_Book_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:AuthorID,Referenced:Bookstore.Person";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsUniqueError(interpretedException, @"Bookstore.Book", @"IX_Book_Code"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:Code";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Book*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Book");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Book> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Book*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Book*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Book");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Book*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new CommonMisspelling()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_CommonMisspelling(errorIds))
                        yield return error;
            }
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredCode()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredCode(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Book*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_CommonMisspelling(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"CommonMisspelling";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.CommonMisspelling*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.CommonMisspelling*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"It is not allowed to enter misspelled word ""curiousity"".",
                Metadata = metadata
            });
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredCode(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredCode";
            metadata[@"Property"] = @"Code";
            /*InvalidDataInfo ErrorMetadata Bookstore.Book.SystemRequiredCode*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Book.SystemRequiredCode*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"ShortString Bookstore.Book.Code" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.CommonMisspelling parameter)
        {/*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.CommonMisspelling'*/
            return source.Where(book => book.Title.Contains("curiousity"));
        }

        public IQueryable<Common.Queryable.Bookstore_Book> Filter(IQueryable<Common.Queryable.Bookstore_Book> source, Bookstore.SystemRequiredCode parameter)
        {/*QueryFilterExpressionInfo BeforeFilter Bookstore.Book.'Bookstore.SystemRequiredCode'*/
            return source.Where(item => item.Code == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Book*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ChildrensBook*/
    public partial class ChildrensBook_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ChildrensBook*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ChildrensBook, Bookstore.ChildrensBook> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ChildrensBook, Bookstore.ChildrensBook> // Common.ReadableRepositoryBase<Bookstore.ChildrensBook> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ChildrensBook>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ChildrensBook*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ChildrensBook*/

        public ChildrensBook_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ChildrensBook*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ChildrensBook*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.AgeFrom_AgeTo_RangeFilter", typeof(Bookstore.AgeFrom_AgeTo_RangeFilter)),
                /*DataStructureInfo ReadParameterTypes Bookstore.ChildrensBook*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ChildrensBook> insertedNew, IEnumerable<Bookstore.ChildrensBook> updatedNew, IEnumerable<Bookstore.ChildrensBook> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.ChildrensBook*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ChildrensBook*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ChildrensBook*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ChildrensBook*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ChildrensBook");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ChildrensBook> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ChildrensBook*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ChildrensBook*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ChildrensBook");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ChildrensBook*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new AgeFrom_AgeTo_RangeFilter()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_AgeFrom__AgeTo__RangeFilter(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ChildrensBook*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_AgeFrom__AgeTo__RangeFilter(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"AgeFrom_AgeTo_RangeFilter";
            metadata[@"Property"] = @"AgeFrom";
            /*InvalidDataInfo ErrorMetadata Bookstore.ChildrensBook.AgeFrom_AgeTo_RangeFilter*/
            /*InvalidDataInfo CustomValidationResult Bookstore.ChildrensBook.AgeFrom_AgeTo_RangeFilter*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"Value of {0} has to be less than or equal to {1}.",
                MessageParameters = new object[] { @"AgeFrom", @"AgeTo" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_ChildrensBook> Filter(IQueryable<Common.Queryable.Bookstore_ChildrensBook> source, Bookstore.AgeFrom_AgeTo_RangeFilter parameter)
        {/*QueryFilterExpressionInfo BeforeFilter Bookstore.ChildrensBook.'Bookstore.AgeFrom_AgeTo_RangeFilter'*/
            return source.Where(item => item.AgeFrom != null && item.AgeTo != null && item.AgeFrom > item.AgeTo);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ChildrensBook*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Comment*/
    public partial class Comment_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Comment*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Comment, Bookstore.Comment> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Comment, Bookstore.Comment> // Common.ReadableRepositoryBase<Bookstore.Comment> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Comment>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Comment*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Comment*/

        public Comment_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Comment*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Comment*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                new KeyValuePair<string, Type>(@"Bookstore.SystemRequiredBook", typeof(Bookstore.SystemRequiredBook)),
                /*DataStructureInfo ReadParameterTypes Bookstore.Comment*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Comment> insertedNew, IEnumerable<Bookstore.Comment> updatedNew, IEnumerable<Bookstore.Comment> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Comment*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Comment*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Comment*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Comment> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Comment> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Comment*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Comment*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Book", @"ID", @"FK_Comment_Book_BookID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Comment,Property:BookID,Referenced:Bookstore.Book";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Comment*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Comment");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Comment> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Comment*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Comment*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Comment");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Comment*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            if (onSave)
            {
                var errorIds = this.Filter(this.Query(ids), new SystemRequiredBook()).Select(item => item.ID).ToArray();
                if (errorIds.Count() > 0)
                    foreach (var error in GetErrorMessage_SystemRequiredBook(errorIds))
                        yield return error;
            }
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Comment*/
            yield break;
        }

        public IEnumerable<InvalidDataMessage> GetErrorMessage_SystemRequiredBook(IEnumerable<Guid> invalidData_Ids)
        {
            IDictionary<string, object> metadata = new Dictionary<string, object>();
            metadata["Validation"] = @"SystemRequiredBook";
            metadata[@"Property"] = @"Book";
            /*InvalidDataInfo ErrorMetadata Bookstore.Comment.SystemRequiredBook*/
            /*InvalidDataInfo CustomValidationResult Bookstore.Comment.SystemRequiredBook*/
            return invalidData_Ids.Select(id => new InvalidDataMessage
            {
                ID = id,
                Message = @"System required property {0} is not set.",
                MessageParameters = new object[] { @"Reference Bookstore.Comment.Book" },
                Metadata = metadata
            });
        }

        public IQueryable<Common.Queryable.Bookstore_Comment> Filter(IQueryable<Common.Queryable.Bookstore_Comment> source, Bookstore.SystemRequiredBook parameter)
        {/*QueryFilterExpressionInfo BeforeFilter Bookstore.Comment.'Bookstore.SystemRequiredBook'*/
            return source.Where(item => item.Book == null);
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Comment*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.ForeignBook*/
    public partial class ForeignBook_Repository : /*DataStructureInfo OverrideBaseType Bookstore.ForeignBook*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_ForeignBook, Bookstore.ForeignBook> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_ForeignBook, Bookstore.ForeignBook> // Common.ReadableRepositoryBase<Bookstore.ForeignBook> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.ForeignBook>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.ForeignBook*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.ForeignBook*/

        public ForeignBook_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.ForeignBook*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.ForeignBook*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.ForeignBook*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.ForeignBook> insertedNew, IEnumerable<Bookstore.ForeignBook> updatedNew, IEnumerable<Bookstore.ForeignBook> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.ForeignBook*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_ForeignBook> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_ForeignBook> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.OriginalLanguage, newItem, "Bookstore", "ForeignBook", "OriginalLanguage");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.ForeignBook*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.ForeignBook*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnInsertUpdate(interpretedException, @"Bookstore.Person", @"ID", @"FK_ForeignBook_Person_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:TranslatorID,Referenced:Bookstore.Person";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.ForeignBook*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.ForeignBook");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_ForeignBook> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.ForeignBook*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.ForeignBook*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.ForeignBook");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.ForeignBook*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.ForeignBook*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.ForeignBook*/
    }

    /*DataStructureInfo RepositoryAttributes Bookstore.Person*/
    public partial class Person_Repository : /*DataStructureInfo OverrideBaseType Bookstore.Person*/ Common.OrmRepositoryBase<Common.Queryable.Bookstore_Person, Bookstore.Person> // Common.QueryableRepositoryBase<Common.Queryable.Bookstore_Person, Bookstore.Person> // Common.ReadableRepositoryBase<Bookstore.Person> // global::Common.RepositoryBase
        , IWritableRepository<Bookstore.Person>, IValidateRepository/*DataStructureInfo RepositoryInterface Bookstore.Person*/
    {
        private readonly Rhetos.Utilities.ISqlUtility _sqlUtility;
        /*DataStructureInfo RepositoryPrivateMembers Bookstore.Person*/

        public Person_Repository(Common.DomRepository domRepository, Common.ExecutionContext executionContext, Rhetos.Utilities.ISqlUtility _sqlUtility/*DataStructureInfo RepositoryConstructorArguments Bookstore.Person*/)
        {
            _domRepository = domRepository;
            _executionContext = executionContext;
            this._sqlUtility = _sqlUtility;
            /*DataStructureInfo RepositoryConstructorCode Bookstore.Person*/
        }

        public static KeyValuePair<string, Type>[] GetReadParameterTypes()
        {
            return new KeyValuePair<string, Type>[]
            {
                /*DataStructureInfo ReadParameterTypes Bookstore.Person*/
            };
        }
        
        public virtual void Save(IEnumerable<Bookstore.Person> insertedNew, IEnumerable<Bookstore.Person> updatedNew, IEnumerable<Bookstore.Person> deletedIds, bool checkUserPermissions = false)
        {
            if (!DomHelper.InitializeSaveMethodItems(ref insertedNew, ref updatedNew, ref deletedIds))
                return;

            /*DataStructureInfo WritableOrm ClearContext Bookstore.Person*/

            /*DataStructureInfo WritableOrm ArgumentValidation Bookstore.Person*/

            /*DataStructureInfo WritableOrm Initialization Bookstore.Person*/

            // Using old data, including lazy loading of navigation properties:

            IEnumerable<Common.Queryable.Bookstore_Person> deleted = DomHelper.LoadOldDataWithNavigationProperties(deletedIds, this);
            IEnumerable<Common.Queryable.Bookstore_Person> updated = DomHelper.LoadOldDataWithNavigationProperties(updatedNew, this);

            foreach (var newItem in insertedNew.Concat(updatedNew))
                ShortStringPropertyCodeGenerator.CheckMaxLength(newItem.Name, newItem, "Bookstore", "Person", "Name");

            /*DataStructureInfo WritableOrm OldDataLoaded Bookstore.Person*/

            /*DataStructureInfo WritableOrm ProcessedOldData Bookstore.Person*/

            {
                DomHelper.WriteToDatabase(insertedNew, updatedNew, deletedIds, _executionContext.PersistenceStorage, checkUserPermissions, _sqlUtility,
                    out Exception saveException, out Rhetos.RhetosException interpretedException);

                if (saveException != null)
                {
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.Book", @"AuthorID", @"FK_Book_Person_AuthorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.Book,Property:AuthorID,Referenced:Bookstore.Person";
                    if (interpretedException is Rhetos.UserException && Rhetos.Utilities.MsSqlUtility.IsReferenceErrorOnDelete(interpretedException, @"Bookstore.ForeignBook", @"TranslatorID", @"FK_ForeignBook_Person_TranslatorID"))
                        ((Rhetos.UserException)interpretedException).SystemMessage = @"DataStructure:Bookstore.ForeignBook,Property:TranslatorID,Referenced:Bookstore.Person";
                    /*DataStructureInfo WritableOrm OnDatabaseError Bookstore.Person*/
                    DomHelper.ThrowInterpretedException(checkUserPermissions, saveException, interpretedException, _sqlUtility, "Bookstore.Person");
                }
            }

            deleted = null;
            updated = this.Query(updatedNew.Select(item => item.ID));
            IEnumerable<Common.Queryable.Bookstore_Person> inserted = this.Query(insertedNew.Select(item => item.ID));

            bool allEffectsCompleted = false;
            try
            {
                /*DataStructureInfo WritableOrm OnSaveTag1 Bookstore.Person*/

                /*DataStructureInfo WritableOrm OnSaveTag2 Bookstore.Person*/

                Rhetos.Dom.DefaultConcepts.InvalidDataMessage.ValidateOnSave(insertedNew, updatedNew, this, "Bookstore.Person");

                /*DataStructureInfo WritableOrm AfterSave Bookstore.Person*/

                allEffectsCompleted = true;
            }
            finally
            {
                if (!allEffectsCompleted)
                    _executionContext.PersistenceTransaction.DiscardOnDispose();
            }
        }

        public IEnumerable<Rhetos.Dom.DefaultConcepts.InvalidDataMessage> Validate(IList<Guid> ids, bool onSave)
        {
            /*DataStructureInfo WritableOrm OnSaveValidate Bookstore.Person*/
            yield break;
        }

        /*DataStructureInfo RepositoryMembers Bookstore.Person*/
    }

    /*ModuleInfo HelperNamespaceMembers Bookstore*/

    #pragma warning restore // See configuration setting CommonConcepts:CompilerWarningsInGeneratedCode.
}

